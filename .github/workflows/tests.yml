name: Tests

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: test
      NODE_OPTIONS: --experimental-vm-modules
      DATABASE_URL: ${{ secrets.TEST_DATABASE_URL || 'postgresql://test:test@localhost:5432/test_db' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        id: test
        run: |
          npm test -- --coverage \
            --coverageReporters=json-summary \
            --coverageReporters=lcov \
            --coverageReporters=text
        continue-on-error: true

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ github.run_id }}
          path: coverage/
          retention-days: 30

      - name: Generate GitHub step summary
        if: always()
        run: |
          echo "## üìä Test Results" >> $GITHUB_STEP_SUMMARY
          
          if [ -f coverage/coverage-summary.json ]; then
            LINES=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
            FUNCTIONS=$(jq -r '.total.functions.pct' coverage/coverage-summary.json)
            BRANCHES=$(jq -r '.total.branches.pct' coverage/coverage-summary.json)
            STATEMENTS=$(jq -r '.total.statements.pct' coverage/coverage-summary.json)
            
            echo "### Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Coverage |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY
            echo "| Lines | ${LINES}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Functions | ${FUNCTIONS}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Branches | ${BRANCHES}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Statements | ${STATEMENTS}% |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if (( $(echo "$LINES >= 80" | bc -l) )) && (( $(echo "$FUNCTIONS >= 80" | bc -l) )); then
              echo "‚úÖ **Coverage Status**: Good coverage levels maintained!" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è **Coverage Status**: Consider improving test coverage." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå **Test Status**: Tests failed to generate coverage report." >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.test.outcome }}" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ùå **Some tests failed. Please check the logs above.**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Add test failure annotations
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            core.error('Tests failed. Please check the test output above for details.');

            if (context.eventName === 'pull_request') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ‚ùå Tests Failed

**Action Required**: Some tests are failing in this pull request.

### Next Steps:
1. Review the test output in the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})
2. Fix the failing tests locally by running \`npm test\`
3. Push your fixes to update this PR

### Environment Variables Used:
- \`NODE_ENV=test\`
- \`NODE_OPTIONS=--experimental-vm-modules\`
- \`DATABASE_URL\` (configured from secrets)

The coverage report has been uploaded as an artifact for detailed analysis.`
              });
            }

      - name: Fail workflow if tests failed
        if: steps.test.outcome == 'failure'
        run: exit 1
